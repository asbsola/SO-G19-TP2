\documentclass{article}
\title{\textbf{Trabajo Práctico 2} \\ [1ex]
\large Instituto Tecnológico de Buenos Aires - Sistemas Operativos (72.11) \\ [1ex]
\large Grupo 19 }
\date{14 de octubre de 2024}
\author{
\textbf{Ignacio Searles}\\
isearles@itba.edu.ar\\
64.536
\and
\textbf{Augusto Barthelemy Solá}\\
abarthelemysola@itba.edu.ar\\
64.502
\and
\textbf{Santiago Bassi}\\
sabassi@itba.edu.ar\\
64.643
}

\usepackage{multicol}
\usepackage{graphicx, wrapfig}
\graphicspath{ {imágenes/} }

\usepackage{float}
\usepackage{amsmath}
\usepackage{amsfonts}

\usepackage{hyperref}

\usepackage{caption, threeparttable}
\usepackage{hyperref}

\usepackage[margin=1.3in]{geometry}

\renewcommand{\figurename}{Figura}
\renewcommand{\tablename}{Tabla}
\renewcommand{\abstractname}{Resumen}

\begin{document}
\maketitle

\begin {abstract}

El presente informe trata sobre el desarrollo de un kernel que administra los recursos de hardware de una computadora y que tiene una API para interactuar con el espacio de usuario. En el espacio de usuario se desarrolló un shell que permite ejecutar diferentes módulos cuyo objetivo es mostrar el funcionamiento del sistema.

\end {abstract}

\section {Memory Manager}

Ambos memory managers, al momento de su inicialización, reciben la cantidad de memoria que van a administrar. De esa memoria, consumen una parte para almacenar los datos necesarios para su funcionamiento.

Para los tests del memory manager, se decidió que cuando se compila fuera del kernel, este corra indefinidamente, ya que se puede terminar la ejecución matando el proceso desde la shell. En cambio, cuando se compilan y ejecutan los tests dentro del kernel, se decidió que corran una cantidad determinada de veces, aún así se puede detener la ejecución del mismo mediante un kill del proceso de testeo.

\subsection {Bitmap Memory Manager}

Para el bitmap, se decidió usar dos bits para representar cada bloque de memoria, lo que permite utilizar tres estados (FREE, USED, START). A cada bloque se le asignó un tamaño definido por la macro BLOCK\_SIZE.

A continuación, se detallan las instrucciones para compilar y ejecutar los tests del bitmap memory manager:

\begin{enumerate}

\item Compilación y ejecución de los tests dentro del kernel:

\begin{enumerate}
    \item En la raíz del proyecto, ejecutar \textbf{make}.
    \item Luego, ejecutar \textbf{./run.sh}.
    \item En la shell que se abre, ejecutar \textbf{test\_mm}.
\end{enumerate}

\item Compilación y ejecución de los tests fuera del kernel:

\begin{enumerate}
    \item En la raíz del proyecto, ejecutar \textbf{make bitmaptest}.
    \item Luego, ejecutar \textbf{cd Testing}.
    \item Por último, ejecutar \textbf{./bitmapTest \textless memoryAmount\textgreater}. 

    Siendo memoryAmount la cantidad de memoria que se desea asignar.
\end{enumerate}

\end{enumerate}

\subsection {Buddy Memory Manager}

Para el buddy, se decidió almacenar la información en un árbol, donde cada nodo almacena uno de los siguientes estados: FREE, SPLIT o USED. Al no tener memoria dinámica para generar el árbol, se decidió almacenarlo en un bloque de memoria contigua, disponiendo sus elementos en orden preorder.

A continuación, se detallan las instrucciones para compilar y ejecutar los tests del buddy memory manager:

\begin{enumerate}

\item Compilación y ejecución de los tests dentro del kernel:

\begin{enumerate}
    \item En la raíz del proyecto, ejecutar \textbf{make buddy}.
    \item Luego, ejecutar \textbf{./run.sh}.
    \item En la shell que se abre, ejecutar \textbf{test\_mm}.
\end{enumerate}

\item Compilación y ejecución de los tests fuera del kernel:

\begin{enumerate}
    \item En la raíz del proyecto, ejecutar \textbf{make buddytest}.
    \item Luego, ejecutar \textbf{cd Testing}.
    \item Por último, ejecutar \textbf{./buddytest \textless memoryAmount\textgreater}.

    Siendo memoryAmount la cantidad de memoria que se desea asignar.
\end{enumerate}
\end{enumerate}

\section {Process Manager}
El process manager proporciona varias funciones importantes para la gestión de procesos. \\
\texttt{init\_process\_manager} inicializa el gestor de procesos. \texttt{create\_process} permite crear un proceso. \texttt{exit\_process} finaliza un proceso con un código de estado, pero no lo borra de la tabla de procesos, mientras que \texttt{kill\_process} hace algo similar, pero lo borra de la tabla de procesos mediante \texttt{remove\_process}. \texttt{block\_process} y \texttt{unblock\_process} controlan su estado de ejecución. Para obtener información sobre los procesos en ejecución, se pueden utilizar funciones como \texttt{get\_processes}, \texttt{get\_num\_processes}, \texttt{get\_max\_pid} y \texttt{get\_ps\_data}. Además, \texttt{wait\_process} permite que un proceso espere a la finalización de un proceso hijo, y \texttt{nicent} ajusta la prioridad de un proceso.

En la creación de procesos armamos el stack de tal manera que al ejecutarse el próximo context switch sea análogo a un proceso que ya estaba ejecutando. Durante la creación del proceso seteamos el registro \texttt{rip} para saltar a una función wrapper, la misma se encarga de llamar a la función dada con \texttt{argv} y \texttt{argc} (tanto el puntero a la función, pid y argv usados por el wrapper se cargan en el stack). Además, la función wrapper hace un exit del proceso al terminar la ejecución del mismo.

\section {Scheduler}
El scheduler es el encargado de gestionar todo lo relacionado con los cambios de contexto. \\ \texttt{init\_scheduler} inicializa el scheduler. Para gestionar los procesos, se utiliza \texttt{schedule\_process} para agregar un proceso al scheduler, y \texttt{deschedule\_process} para removerlo. \texttt{get\_current\_process} devuelve el proceso actualmente en ejecución. La función \texttt{change\_process\_priority} permite cambiar al proceso de lista. Finalmente, \texttt{context\_switch} realiza el cambio de contexto entre procesos, permitiendo la alternancia en la ejecución de distintos procesos.

Para el scheduler, se decidió usar un vector con listas; cada posición del vector representa una prioridad distinta, y en cada lista se guardan los procesos con esa prioridad. Las prioridades son \texttt{HIGH, MEDIUM, LOW}.
Al momento de hacer un \texttt{context\_switch}, se elige el siguiente proceso a ejecutar de manera pseudoaleatoria. Se decidió que un proceso con prioridad \texttt{HIGH} tiene el doble de probabilidades de ser elegido que un proceso con prioridad \texttt{MEDIUM}, y uno con prioridad \texttt{MEDIUM} tiene el doble de probabilidades de ser elegido que uno con prioridad \texttt{LOW}. Para garantizar que se cumpla esta distribución de probabilidad (teniendo en cuenta la cantidad de procesos de cada prioridad), se planteo el siguiente sistema de ecuaciones.

\begin{equation*}
\text{Sean } h, m, l \in [0; 1] \text{ las probabilidades de ejecutar un proceso de dicha prioridad.}
\end{equation*}
\begin{equation*}
h = 2m
\end{equation*}
\begin{equation*}
m = 2l
\end{equation*}
\begin{equation*}
\text{Sean } h\_len, m\_len, l\_len \in \mathbb{N} \text{ las longitudes de las listas de prioridad.}
\end{equation*}
\begin{equation*}
1 = h * h\_len + m * m\_len + l * l\_len
\end{equation*}
Resolviendo el sistema se obtiene,

\begin{equation*}
h = \frac{4}{4 h\_len + 2 m\_len + l\_len}
\end{equation*}

\begin{equation*}
m = \frac{2}{4 h\_len + 2 m\_len + l\_len}
\end{equation*}

\begin{equation*}
l = \frac{1}{4 h\_len + 2 m\_len + l\_len}
\end{equation*}
Si $h\_len, m\_len, l\_len$ son 0, las mismas formulas todavía valen. El caso donde todos son 0 no lo consideramos, pues siempre existe el proceso idle.

Luego las probabilidades de correr un proceso de una lista de prioridades particular es,

\begin{equation*}
h\_list = h * h\_len = h\_len *  \frac{4}{4 h\_len + 2 m\_len + l\_len}
\end{equation*}

\begin{equation*}
m\_list = m * m\_len = m\_len * = \frac{2}{4 h\_len + 2 m\_len + l\_len}
\end{equation*}

\begin{equation*}
l\_list = l * l\_len = l\_len * \frac{1}{4 h\_len + 2 m\_len + l\_len}
\end{equation*}

Dichas probabilidades las usamos al momento de hacer el context switch para decidir de que lista de prioridades vamos a correr el siguiente proceso.

\section {Idle}
El idle es un proceso que se crea al inicializar el process manager, el mismo no se puede terminar, bloquear, ni cambiar su prioridad. Su función es, si los tuviera, liberar a sus hijo que estén en estado \texttt{EXITED} y luego ejecutar yield para ceder la cpu a otro proceso. El mismo al comenzar es el encargado de crear el proceso \texttt{shell}.

\section {Shell}
La shell posee comandos que corren como procesos y otros que son comando built-in. Ejecutando el comando help se puede ver una lista con todos los comandos disponibles y si son procesos o built-in. Para todos los módulos que corren como procesos, se les puede poner como último argumento \texttt{\&} para que corran en background.

La diferencia entre correr un proceso en background o foreground es que si el proceso está en foreground la shell hace un \texttt{waitpid} que espera a que el proceso termine y no si está en background. Los procesos pueden elegir si imprimir o no al buffer de texto si están en background.
\texttt{\newline}
A continuación se detallan algunos módulos que sirven para testear el funcionamiento del sistema:
\begin{itemize}
    \item \texttt{test\_processes}: El mismo espera los siguientes argumentos: \texttt{cantidad\_iteraciones}, \newline \texttt{cantidad\_procesos} y opcionalmente \texttt{\&}. Si bien se le realizaron modificaciones, este test fue provisto por la cátedra.
    \item \texttt{test\_priority}:  El mismo espera los siguientes argumentos: \texttt{cantidad\_procesos}, teniendo un máximo de 250; y opcionalmente \texttt{\&}. Si bien se le realizaron modificaciones, este test fue provisto por la cátedra.
    \item \texttt{test\_priority\_dist}:  El mismo espera los siguientes argumentos: \texttt{cantidad\_procesos}, teniendo un máximo de 250; y opcionalmente \texttt{\&}. Este proceso, ejecuta fracciones iguales de procesos con cada prioridad. Luego, muestra la cantidad de veces que se ejecutaron los procesos con cada una de las prioridades.
    \item \texttt{test\_idle\_cleanup}: Muestra que el idle borre bien a todos los hijos que estén en estado \texttt{EXITED}.
    \item \texttt{test\_wait}: El mismo espera los siguientes argumentos: \texttt{cantidad\_iteraciones}, \newline \texttt{cantidad\_procesos} y opcionalmente \texttt{\&}. Este test verifica que waitpid no lance errores.

\end{itemize}

\section {Otras decisiones de diseño}
\begin{itemize}
    \item Se decidió crear un archivo \texttt{\texttt{def.h}} para definir las constantes y estructuras que se usan tanto del lado del kernel como del userland.
    \item Se decidió que al momento de crear un proceso el mismo se cree con prioridad \texttt{LOW}.
    \item Se decidió que la syscall \texttt{kill} permita especificar si al matar a un proceso se matan también a sus descendientes.
    \item Se decidió que en la shell, al llamar al comando kill, el mismo reciba el pid del proceso como argumento y de opcionalmente el argumento \texttt{kill} para matar a los descendientes del proceso.
    \item Se decidió que los procesos ejecutados sigan en la lista de PCBs hasta que mueran o terminen y se les haga \texttt{wait}. Por dicho motivo la shell tiene un comando \texttt{cleanup} para limpiar los procesos \texttt{EXITED} a los que no se les hizo \texttt{wait}.\item En lugar de tener un único comando en la shell que bloquee o desbloquee procesos dependiendo de su estado, se decidió tener dos comandos distintos \texttt{block} y \texttt{unblock}. Ambos reciben el pid del proceso a bloquear o desbloquear.
\end{itemize}

\section {Limitaciones}
\begin{itemize}
    \item El sistema tiene un límite de 256 procesos.
    \item El sistema solo puede manejar tres prioridades.
    \item El stack de los procesos es de 8KB.
    \item El sistema solo puede manejar 4MB de memoria.
\end{itemize}

Si bien estan estas limitaciones, el sistema fue diseñado de tal manera que se pueden cambiar fácilmente.
En el archivo \texttt{def.h} se encuentran las constantes que definen estas limitaciones.


\end{document}
